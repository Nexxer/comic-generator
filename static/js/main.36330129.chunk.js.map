{"version":3,"sources":["components/Header/Header.tsx","const/const.tsx","components/Info/Info.tsx","components/Card/Card.tsx","components/Cards/Cards.tsx","components/Popup/Popup.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","click","className","type","name","id","autoComplete","htmlFor","onClick","defaultChecked","maxCardsInPopup","Info","Card","number","card","scaleCard","addCard","manualCreateArr","includes","src","alt","idCard","handleClickCard","uniqid","require","Cards","manualCreate","onOpenPopup","autoCreateArr","submitGenerate","handleChange","numberOfCards","onSubmit","placeholder","min","max","value","onChange","map","Popup","onClosePopup","failAdd","onOverlayAndEscClick","useState","currentPage","setCurrentPage","allCard","subArray","maxPageCount","i","push","length","Math","floor","totalArr","ceil","slice","previousLabel","nextLabel","breakLabel","breakClassName","pageCount","marginPagesDisplayed","pageRangeDisplayed","onPageChange","selected","containerClassName","activeClassName","disabledClassName","pageClassName","pageLinkClassName","previousClassName","nextClassName","previousLinkClassName","nextLinkClassName","cardsArr","App","itemMenu","setItemMenu","showPopup","setShowPopup","setNumberOfCards","setAutoCreateArr","setManualCreateArr","setFailAdd","event","target","valueAsNumber","e","preventDefault","newArr","random","totalCards","toglePopup","handleOverlayClosePopup","useCallback","classList","contains","useEffect","window","addEventListener","key","innerText","setMenuDisplay","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.36330129.chunk.js","sourcesContent":["import \"./Header.css\";\r\n\r\nfunction Header({ click }: any) {\r\n  return (\r\n    <header className=\"header\">\r\n      <h1 className=\"header__title\">\r\n        <div className=\"header__icon\">18+</div>\r\n        Генератор коммиксов\r\n      </h1>\r\n\r\n      <nav className=\"header__nav\">\r\n        <ul className=\"header__list\">\r\n          <li className=\"header__list_item\">\r\n            <input\r\n              type=\"radio\"\r\n              className=\"btn-check\"\r\n              name=\"btnradio\"\r\n              id=\"btnradio1\"\r\n              autoComplete=\"off\"\r\n            />\r\n            <label htmlFor=\"btnradio1\" onClick={click}>\r\n              Создать\r\n            </label>\r\n          </li>\r\n\r\n          <li className=\"header__list_item\">\r\n            <input\r\n              type=\"radio\"\r\n              className=\"btn-check\"\r\n              name=\"btnradio\"\r\n              id=\"btnradio2\"\r\n              autoComplete=\"off\"\r\n            />\r\n            <label htmlFor=\"btnradio2\" onClick={click}>\r\n              Сгенерировать\r\n            </label>\r\n          </li>\r\n\r\n          <li className=\"header__list_item\">\r\n            <input\r\n              type=\"radio\"\r\n              className=\"btn-check\"\r\n              name=\"btnradio\"\r\n              id=\"btnradio3\"\r\n              autoComplete=\"off\"\r\n              defaultChecked\r\n            />\r\n            <label htmlFor=\"btnradio3\" onClick={click}>\r\n              Инфо\r\n            </label>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","export const minCardsGenerate: number = 6;\r\nexport const maxCardsGenerate: number = 20;\r\nexport const maxCardsInPopup: number = 14;\r\nexport const totalCards: number = 301;\r\n","import \"./Info.css\";\r\nimport { minCardsGenerate, maxCardsGenerate } from \"./../../const/const\";\r\n\r\nfunction Info() {\r\n  return (\r\n    <section className=\"info\">\r\n      <div className=\"info__warning\">\r\n        <h2 className=\"info__warning_title\">Предупреждение!</h2>\r\n        <p className=\"info__text\">\r\n          Все, что вы увидите далее имеет лишь развлекательную цель и никак не желает оскорбить\r\n          кого-то.\r\n          <br /> Так же я не присваиваю себе права на используеммый материал.\r\n        </p>\r\n      </div>\r\n      <div>\r\n        <h3 className=\"info__title\">Информация о проекте:</h3>\r\n        <p className=\"info__text\">проект создан на ReactJS и TypeScript.</p>\r\n      </div>\r\n      <div>\r\n        <h3 className=\"info__title\">Описание:</h3>\r\n        <p className=\"info__text\">\r\n          {`на данной странице можно создавать свой комикс или генерировать случайный (от ${minCardsGenerate} до ${maxCardsGenerate}          карточек), с возсожностью сохранения на свой ПК`}\r\n        </p>\r\n      </div>\r\n      <div>\r\n        <h3 className=\"info__title\">Как пользоваться:</h3>\r\n        <p className=\"info__text\">на данный момент вы находитесь в меню \"Инфо\".</p>\r\n        <h3 className=\"info__title\">Для создания своего комикса:</h3>\r\n        <ul className=\"info__list\">\r\n          <li>выберите в меню \"Создать\"</li>\r\n          <li>нажмите на пустую карту</li>\r\n          <li>выберите из католога понравившеюся карточку для вставки</li>\r\n          <li>\r\n            повторяйте добавлять до достижения желаемого результата или ограничения в 12 карточек\r\n          </li>\r\n        </ul>\r\n        <h3 className=\"info__title\">Для генерации случайного комикса:</h3>\r\n        <ul className=\"info__list\">\r\n          <li>выберите в меню \"Сгенерировать\"</li>\r\n          <li>{`введите количество желаемых карточек от ${minCardsGenerate} до ${maxCardsGenerate}`}</li>\r\n          <li>Нажмите кнопку \"Создать\"</li>\r\n        </ul>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Info;\r\n","import \"./Card.css\";\r\n\r\nfunction Card({ card, scaleCard = false, addCard, manualCreateArr = [] }: any) {\r\n  function checkCardinInCreatedArr(number: number) {\r\n    return manualCreateArr.includes(number);\r\n  }\r\n\r\n  function handleClickCard(idCard: number) {\r\n    if (scaleCard) {\r\n      return addCard(idCard);\r\n    }\r\n  }\r\n  return (\r\n    <div\r\n      className={`card ${scaleCard ? \"card_scale\" : \"\"} ${\r\n        checkCardinInCreatedArr(card) ? \"card_error\" : \"\"\r\n      }`}>\r\n      <div className=\"card__info\">\r\n        <span>{`id: ${card}`}</span>\r\n      </div>\r\n      <img\r\n        src={`/cards/${card}.jpg`}\r\n        alt=\"карточка\"\r\n        className=\"card__image\"\r\n        onClick={() => handleClickCard(card)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport default Card;\r\n","import Card from \"./../Card/Card\";\r\nimport \"./Cards.css\";\r\nimport { minCardsGenerate, maxCardsGenerate } from \"./../../const/const\";\r\nconst uniqid = require(\"uniqid\");\r\n\r\nfunction Cards({\r\n  manualCreate,\r\n  onOpenPopup,\r\n  manualCreateArr,\r\n  autoCreateArr,\r\n  submitGenerate,\r\n  handleChange,\r\n  numberOfCards,\r\n}: any) {\r\n  return (\r\n    <section>\r\n      {!manualCreate ? (\r\n        <form className=\"generator\" onSubmit={submitGenerate}>\r\n          <label className=\"generator__title\">\r\n            {` Введите количество карт для генерирования (от ${minCardsGenerate} до ${maxCardsGenerate})`}\r\n            <input\r\n              type=\"number\"\r\n              name=\"maxCardsGenerate\"\r\n              className=\"generator__input\"\r\n              placeholder=\"Сюда\"\r\n              min={minCardsGenerate}\r\n              max={maxCardsGenerate}\r\n              value={numberOfCards}\r\n              onChange={handleChange}\r\n            />\r\n          </label>\r\n          <button className=\"generator__button\" type=\"submit\">\r\n            Генерировать\r\n          </button>\r\n        </form>\r\n      ) : null}\r\n      <div className=\"cards\">\r\n        {manualCreate ? (\r\n          <>\r\n            {manualCreateArr.map((card: number) => {\r\n              return <Card scaleCard={false} card={card} key={uniqid()} />;\r\n            })}\r\n\r\n            <button className=\"card cards__button-add\" onClick={onOpenPopup}>\r\n              Добавить карточку\r\n            </button>\r\n          </>\r\n        ) : (\r\n          <>\r\n            {autoCreateArr.map((card: number) => {\r\n              return <Card scaleCard={false} card={card} key={uniqid()} />;\r\n            })}\r\n          </>\r\n        )}\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\nexport default Cards;\r\n","import Card from \"../Card/Card\";\r\nimport \"./Popup.css\";\r\nimport { maxCardsInPopup, totalCards } from \"./../../const/const\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport { useState } from \"react\";\r\nconst uniqid = require(\"uniqid\");\r\n\r\nfunction Popup({ onClosePopup, addCard, failAdd, manualCreateArr, onOverlayAndEscClick }: any) {\r\n  const [currentPage, setCurrentPage] = useState<number>(0);\r\n  let allCard: any[] = [];\r\n  let subArray: any[] = [];\r\n  let maxPageCount: number = 1;\r\n\r\n  //Сбор всех имеющихся карт\r\n  (function autoGenerateAllCardsArr() {\r\n    for (let i = 0; i < totalCards; i++) {\r\n      allCard.push(i + 1);\r\n    }\r\n    return allCard;\r\n  })();\r\n\r\n  if (allCard.length % maxCardsInPopup) {\r\n    maxPageCount = Math.floor(allCard.length / maxCardsInPopup) + 1;\r\n  } else {\r\n    maxPageCount = allCard.length / maxCardsInPopup;\r\n  }\r\n  //Функция разбивки целого массива на подмасивы\r\n  (function createSubArray(totalArr: any[]) {\r\n    for (let i = 0; i < Math.ceil(totalArr.length / maxCardsInPopup); i++) {\r\n      subArray[i] = totalArr.slice(i * maxCardsInPopup, i * maxCardsInPopup + maxCardsInPopup);\r\n    }\r\n    return subArray;\r\n  })(allCard);\r\n\r\n  function pageChangeHandler({ selected }: any) {\r\n    setCurrentPage(selected);\r\n  }\r\n\r\n  return (\r\n    <div className=\"popup\" onClick={onOverlayAndEscClick}>\r\n      <div className=\"popup__content \">\r\n        <h2 className=\"popup__title\">Выберите карточку для добавления</h2>\r\n        <ReactPaginate\r\n          previousLabel={\"<\"}\r\n          nextLabel={\">\"}\r\n          breakLabel={\"...\"}\r\n          breakClassName={\"pagination-item_break\"}\r\n          pageCount={maxPageCount}\r\n          marginPagesDisplayed={1}\r\n          pageRangeDisplayed={3}\r\n          onPageChange={pageChangeHandler}\r\n          containerClassName={\"pagination\"}\r\n          activeClassName={\"pagination-item_active\"}\r\n          disabledClassName={\"pagination-item_disabled\"}\r\n          pageClassName=\"pagination-item\"\r\n          pageLinkClassName=\"pagination-link\"\r\n          previousClassName=\"pagination-item\"\r\n          nextClassName=\"pagination-item\"\r\n          previousLinkClassName=\"pagination-link\"\r\n          nextLinkClassName=\"pagination-link\"\r\n        />\r\n        <div className=\"popup__card-choice cards\">\r\n          {subArray[currentPage].map((card: number) => {\r\n            return (\r\n              <Card\r\n                scaleCard={true}\r\n                card={card}\r\n                key={uniqid()}\r\n                addCard={addCard}\r\n                failAdd={failAdd}\r\n                manualCreateArr={manualCreateArr}\r\n              />\r\n            );\r\n          })}\r\n          <Card\r\n            cardsArr={subArray[currentPage]}\r\n            scaleCard={true}\r\n            addCard={addCard}\r\n            failAdd={failAdd}\r\n            manualCreateArr={manualCreateArr}\r\n          />\r\n        </div>\r\n        <button className=\"popup__button-close\" onClick={onClosePopup} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Popup;\r\n","import \"./App.css\";\r\nimport React, { useState, useCallback, useEffect } from \"react\";\r\nimport Header from \"../Header/Header\";\r\nimport Info from \"../Info/Info\";\r\nimport Cards from \"../Cards/Cards\";\r\nimport Popup from \"../Popup/Popup\";\r\nimport { minCardsGenerate, totalCards } from \"./../../const/const\";\r\n\r\nfunction App() {\r\n  const [itemMenu, setItemMenu] = useState<string>(\"\");\r\n  const [showPopup, setShowPopup] = useState<boolean>(false);\r\n  const [numberOfCards, setNumberOfCards] = useState<number>(minCardsGenerate);\r\n  const [autoCreateArr, setAutoCreateArr] = useState<any>([]);\r\n  const [manualCreateArr, setManualCreateArr] = useState<any>([]);\r\n  const [failAdd, setFailAdd] = useState<boolean>(false);\r\n\r\n  //установка значения введенного кол-ва карт\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setNumberOfCards(event.target.valueAsNumber);\r\n  };\r\n\r\n  //генерирование случайных карт, в количестве введеных в handleChange\r\n  function submitGenerate(e: React.FormEvent) {\r\n    e.preventDefault();\r\n    let newArr: any[] = [];\r\n    for (let i = 0; i < numberOfCards; i++) {\r\n      const idCard = Math.floor(Math.random() * Math.floor(totalCards - 1) + 1);\r\n      newArr.push(idCard);\r\n    }\r\n    setNumberOfCards(minCardsGenerate);\r\n    return setAutoCreateArr(newArr);\r\n  }\r\n\r\n  //определение выбранного элемента меню\r\n  function click(e: any) {\r\n    setItemMenu(e.target.innerText);\r\n  }\r\n\r\n  //открытие / закрытие попапа\r\n  function toglePopup() {\r\n    setShowPopup(!showPopup);\r\n  }\r\n  //закрытие попапа по клику на оверлей\r\n  const handleOverlayClosePopup = useCallback((e) => {\r\n    if (e.target.classList.contains(\"popup\")) {\r\n      setShowPopup(false);\r\n    }\r\n  }, []);\r\n\r\n  //закрытие попапа по Esc\r\n  useEffect(() => {\r\n    window.addEventListener(\"keyup\", (e) => {\r\n      if (e.key === \"Escape\") {\r\n        setShowPopup(false);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  //функция определяет какое меню отображать и возвращает поле Card с требуемыми значениями\r\n  function setMenuDisplay() {\r\n    switch (itemMenu) {\r\n      case \"Создать\":\r\n        return (\r\n          <Cards manualCreate={true} onOpenPopup={toglePopup} manualCreateArr={manualCreateArr} />\r\n        );\r\n      case \"Сгенерировать\":\r\n        return (\r\n          <Cards\r\n            manualCreate={false}\r\n            autoCreateArr={autoCreateArr}\r\n            submitGenerate={submitGenerate}\r\n            handleChange={handleChange}\r\n            numberOfCards={numberOfCards}\r\n          />\r\n        );\r\n      default:\r\n        return <Info />;\r\n    }\r\n  }\r\n\r\n  //добавление карточки из попапа в комикс\r\n  function addCard(e: number) {\r\n    if (showPopup) {\r\n      if (!manualCreateArr.includes(e)) {\r\n        return setManualCreateArr([...manualCreateArr, e]);\r\n      } else {\r\n        console.log(\"WOWOWO\");\r\n        return setFailAdd(true);\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header click={click} />\r\n      <main className=\"wrapper\">{setMenuDisplay()}</main>\r\n      {showPopup ? (\r\n        <Popup\r\n          onClosePopup={toglePopup}\r\n          addCard={addCard}\r\n          failAdd={failAdd}\r\n          manualCreateArr={manualCreateArr}\r\n          onOverlayAndEscClick={handleOverlayClosePopup}\r\n        />\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}