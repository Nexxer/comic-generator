{"version":3,"sources":["components/Header/Header.tsx","components/Info/Info.tsx","const/const.tsx","components/Card/Card.tsx","components/Cards/Cards.tsx","components/Popup/Popup.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","click","className","type","name","id","autoComplete","htmlFor","onClick","defaultChecked","Info","Card","cardsArr","map","card","index","src","alt","Cards","manualCreate","onOpenPopup","useState","numberOfCards","setNumberOfCards","arrCards","setArrCards","arrManualCards","onSubmit","e","arr","preventDefault","i","idCard","Math","floor","random","push","placeholder","min","max","value","onChange","event","target","valueAsNumber","Placeholder","onClosePopup","allCard","onFocus","this","App","itemMenu","setItemMenu","showPopup","setShowPopup","toglePopup","innerText","console","log","setMenuDisplay","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3863d5cc.chunk.js","sourcesContent":["import \"./Header.css\";\r\n\r\nfunction Header({ click }: any) {\r\n  return (\r\n    <header className=\"header\">\r\n      <h1 className=\"header__title\">\r\n        <div className=\"header__icon\">18+</div>\r\n        Генератор коммиксов\r\n      </h1>\r\n\r\n      <nav className=\"header__nav\">\r\n        <ul className=\"header__list\">\r\n          <li className=\"header__list_item\">\r\n            <input\r\n              type=\"radio\"\r\n              className=\"btn-check\"\r\n              name=\"btnradio\"\r\n              id=\"btnradio1\"\r\n              autoComplete=\"off\"\r\n            />\r\n            <label htmlFor=\"btnradio1\" onClick={click}>\r\n              Создать\r\n            </label>\r\n          </li>\r\n\r\n          <li className=\"header__list_item\">\r\n            <input\r\n              type=\"radio\"\r\n              className=\"btn-check\"\r\n              name=\"btnradio\"\r\n              id=\"btnradio2\"\r\n              autoComplete=\"off\"\r\n            />\r\n            <label htmlFor=\"btnradio2\" onClick={click}>\r\n              Сгенерировать\r\n            </label>\r\n          </li>\r\n\r\n          <li className=\"header__list_item\">\r\n            <input\r\n              type=\"radio\"\r\n              className=\"btn-check\"\r\n              name=\"btnradio\"\r\n              id=\"btnradio3\"\r\n              autoComplete=\"off\"\r\n              defaultChecked\r\n            />\r\n            <label htmlFor=\"btnradio3\" onClick={click}>\r\n              Инфо\r\n            </label>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import \"./Info.css\";\r\nimport { minCardsGenerate, maxCardsGenerate } from \"./../../const/const\";\r\n\r\nfunction Info() {\r\n  return (\r\n    <section className=\"info\">\r\n      <div className=\"info__warning\">\r\n        <h2 className=\"info__warning_title\">Предупреждение!</h2>\r\n        <p className=\"info__text\">\r\n          Все, что вы увидите далее имеет лишь развлекательную цель и никак не желает оскорбить\r\n          кого-то.\r\n          <br /> Так же я не присваиваю себе права на используеммый материал.\r\n        </p>\r\n      </div>\r\n      <div>\r\n        <h3 className=\"info__title\">Информация о проекте:</h3>\r\n        <p className=\"info__text\">проект создан на ReactJS и TypeScript.</p>\r\n      </div>\r\n      <div>\r\n        <h3 className=\"info__title\">Описание:</h3>\r\n        <p className=\"info__text\">\r\n          {`на данной странице можно создавать свой комикс или генерировать случайный (от ${minCardsGenerate} до ${maxCardsGenerate}          карточек), с возсожностью сохранения на свой ПК`}\r\n        </p>\r\n      </div>\r\n      <div>\r\n        <h3 className=\"info__title\">Как пользоваться:</h3>\r\n        <p className=\"info__text\">на данный момент вы находитесь в меню \"Инфо\".</p>\r\n        <h3 className=\"info__title\">Для создания своего комикса:</h3>\r\n        <ul className=\"info__list\">\r\n          <li>выберите в меню \"Создать\"</li>\r\n          <li>нажмите на пустую карту</li>\r\n          <li>выберите из католога понравившеюся карточку для вставки</li>\r\n          <li>\r\n            повторяйте добавлять до достижения желаемого результата или ограничения в 12 карточек\r\n          </li>\r\n        </ul>\r\n        <h3 className=\"info__title\">Для генерации случайного комикса:</h3>\r\n        <ul className=\"info__list\">\r\n          <li>выберите в меню \"Сгенерировать\"</li>\r\n          <li>{`введите количество желаемых карточек от ${minCardsGenerate} до ${maxCardsGenerate}`}</li>\r\n          <li>Нажмите кнопку \"Создать\"</li>\r\n        </ul>\r\n\r\n        {/*!TODO добавить описание сохранения*/}\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Info;\r\n","export const minCardsGenerate: number = 3;\r\nexport const maxCardsGenerate: number = 20;","import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nfunction Card({ cardsArr }: any) {\r\n  return (\r\n    <>\r\n      {cardsArr.map((card: number, index: any) => {\r\n        return (\r\n          <div className=\"card\" key={index}>\r\n            <div className=\"card__info\">\r\n              <span>{`№${index + 1}`}</span>\r\n              <span>{`id: ${card}`}</span>\r\n            </div>\r\n            <img src={`/cards/${card}.jpg`} alt=\"карточка\" className=\"card__image\" />\r\n          </div>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n}\r\nexport default Card;\r\n","import React, { useState } from \"react\";\r\nimport Card from \"./../Card/Card\";\r\nimport \"./Cards.css\";\r\nimport { minCardsGenerate, maxCardsGenerate } from \"./../../const/const\";\r\n\r\nfunction Cards({ manualCreate, onOpenPopup }: any) {\r\n  const [numberOfCards, setNumberOfCards] = useState<number>(minCardsGenerate);\r\n  const [arrCards, setArrCards] = useState([] as any);\r\n  const [arrManualCards, setArrManualCards] = useState([] as any);\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setNumberOfCards(event.target.valueAsNumber);\r\n  };\r\n\r\n  const submitGenerate = (e: React.FormEvent) => {\r\n    const arr: number[] = [];\r\n    e.preventDefault();\r\n    for (let i = 0; i < numberOfCards; i++) {\r\n      const idCard = Math.floor(Math.random() * Math.floor(301));\r\n      arr.push(idCard);\r\n    }\r\n    setNumberOfCards(minCardsGenerate);\r\n    return setArrCards(arr);\r\n  };\r\n\r\n  return (\r\n    <section>\r\n      {!manualCreate ? (\r\n        <form className=\"generator\" onSubmit={submitGenerate}>\r\n          <label className=\"generator__title\">\r\n            {` Введите количество карт для генерирования (от ${minCardsGenerate} до ${maxCardsGenerate})`}\r\n            <input\r\n              type=\"number\"\r\n              name=\"maxCardsGenerate\"\r\n              className=\"generator__input\"\r\n              placeholder=\"Сюда\"\r\n              min={minCardsGenerate}\r\n              max={maxCardsGenerate}\r\n              value={numberOfCards}\r\n              onChange={handleChange}\r\n            />\r\n          </label>\r\n          <button className=\"generator__button\" type=\"submit\">\r\n            Генерировать\r\n          </button>\r\n        </form>\r\n      ) : null}\r\n      <div className=\"cards\">\r\n        {manualCreate ? (\r\n          <>\r\n            <Card cardsArr={arrManualCards} />\r\n            <button className=\"card cards__button-add\" onClick={onOpenPopup}>\r\n              +\r\n            </button>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Card cardsArr={arrCards} />\r\n          </>\r\n        )}\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\nexport default Cards;\r\n","import Card from \"../Card/Card\";\r\nimport \"./Popup.css\";\r\n\r\nfunction Placeholder(this: any, { onClosePopup }:any) {\r\n  let allCard: any[] = [];\r\n  (function autoGenerateAllCardsArr() {\r\n    for (let i = 0; i < 200; i++) {\r\n      allCard.push(i + 1);\r\n    }\r\n    return allCard;\r\n  })();\r\n\r\n  return (\r\n    <div className=\"popup\" onFocus={this}>\r\n      <div className=\"popup__content \">\r\n        <h2 className=\"popup__title\">Выберите карточку для добавления</h2>\r\n        <div className=\"popup__card-choice cards\">\r\n          <Card cardsArr={allCard} />\r\n        </div>\r\n        <button className=\"popup__button-close\" onClick={onClosePopup} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Placeholder;\r\n","import \"./App.css\";\nimport { useState } from \"react\";\nimport Header from \"../Header/Header\";\nimport Info from \"../Info/Info\";\nimport Cards from \"../Cards/Cards\";\nimport Popup from \"../Popup/Popup\";\n\nfunction App() {\n  const [itemMenu, setItemMenu] = useState(\"\");\n  const [showPopup, setShowPopup] = useState(false);\n\n  function click(e: any) {\n    setItemMenu(e.target.innerText);\n  }\n\n  function toglePopup() {\n    setShowPopup(!showPopup);\n  }\n\n  function setMenuDisplay() {\n    console.log(\"RENDER\");\n    switch (itemMenu) {\n      case \"Создать\":\n        return <Cards manualCreate={true} onOpenPopup={toglePopup} />;\n\n      case \"Сгенерировать\":\n        return <Cards manualCreate={false} />;\n      default:\n        return <Info />;\n    }\n  }\n\n  return (\n    <>\n      <Header click={click} />\n      <main className=\"wrapper\">{setMenuDisplay()}</main>\n      {showPopup ? <Popup onClosePopup={toglePopup} /> : null}\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}